from sqlalchemy.ext.asyncio import AsyncSession

from app.entities import OperationModel
from app.seeders.base_seeder import BaseSeeder
from app.shared.app_constants import AppTableNames
from app.shared.db_constants import AppDbValueConstants


class OperationSeeder(BaseSeeder):
    async def seed(self, session: AsyncSession):
        data = self.get_data()
        await self.load_seeders(
            OperationModel, session, AppTableNames.OperationTableName, data
        )
        updated_data = self.get_updated_data()
        await self.update_seeders(
            OperationModel,
            session,
            AppTableNames.OperationTableName,
            "value",
            updated_data,
            False,
        )

    def get_dev_data(self):
        return [
            OperationModel(
                id=1,
                title="Валидация перед въездом",
                value=AppDbValueConstants.VALIDATION_BEFORE_ENTRY,
                role_id=None,
                role_value=None,
                role_keycloak_value=None,
                is_first=True,
                is_last=False,
                prev_id=None,
                next_id=None,
                prev_value=None,
                next_value=AppDbValueConstants.ENTRY_CHECKPOINT,
                can_cancel=False,
                is_active=False,
            ),
            OperationModel(
                id=2,
                title="Въезд - Прохождение КПП",
                value=AppDbValueConstants.ENTRY_CHECKPOINT,
                role_id=2,
                role_value=AppDbValueConstants.SECURITY_VALUE,
                role_keycloak_value=AppDbValueConstants.SECURITY_KEYCLOAK_VALUE,
                is_first=False,
                is_last=False,
                prev_id=None,
                next_id=None,
                prev_value=AppDbValueConstants.VALIDATION_BEFORE_ENTRY,
                next_value=AppDbValueConstants.INITIAL_WEIGHING,
                can_cancel=True,
                is_active=True,
            ),
            OperationModel(
                id=3,
                title="Первичное взвешивание",
                value=AppDbValueConstants.INITIAL_WEIGHING,
                role_id=5,
                role_value=AppDbValueConstants.WEIGHER_VALUE,
                role_keycloak_value=AppDbValueConstants.WEIGHER_KEYCLOAK_VALUE,
                is_first=False,
                is_last=False,
                prev_id=None,
                next_id=None,
                prev_value=AppDbValueConstants.ENTRY_CHECKPOINT,
                next_value=AppDbValueConstants.VALIDATION_BEFORE_LOADING,
                can_cancel=True,
                is_active=True,
            ),
            OperationModel(
                id=4,
                title="Валидация перед погрузкой (СБ)",
                value=AppDbValueConstants.VALIDATION_BEFORE_LOADING,
                role_id=3,
                role_value=AppDbValueConstants.SECURITY_LOADER_VALUE,
                role_keycloak_value=AppDbValueConstants.SECURITY_LOADER_KEYCLOAK_VALUE,
                is_first=False,
                is_last=False,
                prev_id=None,
                next_id=None,
                prev_value=AppDbValueConstants.INITIAL_WEIGHING,
                next_value=AppDbValueConstants.LOADING_GOODS,
                can_cancel=False,
                is_active=True,
            ),
            OperationModel(
                id=5,
                title="Погрузка товара",
                value=AppDbValueConstants.LOADING_GOODS,
                role_id=4,
                role_value=AppDbValueConstants.LOADER_VALUE,
                role_keycloak_value=AppDbValueConstants.LOADER_KEYCLOAK_VALUE,
                is_first=False,
                is_last=False,
                prev_id=None,
                next_id=None,
                prev_value=AppDbValueConstants.VALIDATION_BEFORE_LOADING,
                next_value=AppDbValueConstants.CONTROL_WEIGHING,
                can_cancel=True,
                is_active=True,
            ),
            OperationModel(
                id=6,
                title="Контрольное взвешивание",
                value=AppDbValueConstants.CONTROL_WEIGHING,
                role_id=5,
                role_value=AppDbValueConstants.WEIGHER_VALUE,
                role_keycloak_value=AppDbValueConstants.WEIGHER_KEYCLOAK_VALUE,
                is_first=False,
                is_last=False,
                prev_id=None,
                next_id=None,
                prev_value=AppDbValueConstants.LOADING_GOODS,
                next_value=AppDbValueConstants.EXIT_SECURITY_CHECKPOINT,
                can_cancel=False,
                is_active=True,
            ),
            OperationModel(
                id=7,
                title="Выезд - Контрольная проверка товара (СБ КПП)",
                value=AppDbValueConstants.EXIT_SECURITY_CHECKPOINT,
                role_id=2,
                role_value=AppDbValueConstants.SECURITY_VALUE,
                role_keycloak_value=AppDbValueConstants.SECURITY_KEYCLOAK_VALUE,
                is_first=False,
                is_last=False,
                prev_id=None,
                next_id=None,
                prev_value=AppDbValueConstants.CONTROL_WEIGHING,
                next_value=AppDbValueConstants.SUCCESSFULLY_COMPLETED,
                can_cancel=True,
                is_active=True,
            ),
            OperationModel(
                id=8,
                title="Успешно завершено",
                value=AppDbValueConstants.SUCCESSFULLY_COMPLETED,
                role_id=None,
                role_value=None,
                role_keycloak_value=None,
                is_first=False,
                is_last=True,
                prev_id=None,
                next_id=None,
                prev_value=AppDbValueConstants.EXIT_SECURITY_CHECKPOINT,
                next_value=None,
                can_cancel=False,
                is_active=True,
            ),
            OperationModel(
                id=9,
                title="Служба безопасности: Валидация перед разгрузкой и отменой",
                value=AppDbValueConstants.SECURITY_VALIDATION_BEFORE_UNLOADING_AND_CANCELLATION,
                role_id=3,
                role_value=AppDbValueConstants.SECURITY_LOADER_VALUE,
                role_keycloak_value=AppDbValueConstants.SECURITY_LOADER_KEYCLOAK_VALUE,
                is_first=False,
                is_last=False,
                prev_id=None,
                next_id=None,
                prev_value=AppDbValueConstants.CONTROL_WEIGHING,
                next_value=AppDbValueConstants.UNLOADING_EXCESS_GOODS_AND_EXIT,
                can_cancel=False,
                is_active=True,
            ),
            OperationModel(
                id=10,
                title="Разгрузка излишнего товара и выход",
                value=AppDbValueConstants.UNLOADING_EXCESS_GOODS_AND_EXIT,
                role_id=4,
                role_value=AppDbValueConstants.LOADER_VALUE,
                role_keycloak_value=AppDbValueConstants.LOADER_KEYCLOAK_VALUE,
                is_first=False,
                is_last=False,
                prev_id=None,
                next_id=None,
                prev_value=AppDbValueConstants.SECURITY_VALIDATION_BEFORE_UNLOADING_AND_CANCELLATION,
                next_value=AppDbValueConstants.CANCELLED,
                can_cancel=False,
                is_active=True,
            ),
            OperationModel(
                id=11,
                title="Служба безопасности: Валидация перед разгрузкой и взвешиванием",
                value=AppDbValueConstants.SECURITY_VALIDATION_BEFORE_UNLOADING_AND_WEIGHING,
                role_id=3,
                role_value=AppDbValueConstants.SECURITY_LOADER_VALUE,
                role_keycloak_value=AppDbValueConstants.SECURITY_LOADER_KEYCLOAK_VALUE,
                is_first=False,
                is_last=False,
                prev_id=None,
                next_id=None,
                prev_value=AppDbValueConstants.CONTROL_WEIGHING,
                next_value=AppDbValueConstants.UNLOADING_EXCESS_GOODS_AND_WEIGHING,
                can_cancel=False,
                is_active=True,
            ),
            OperationModel(
                id=12,
                title="Разгрузка излишнего товара и взвешивание",
                value=AppDbValueConstants.UNLOADING_EXCESS_GOODS_AND_WEIGHING,
                role_id=4,
                role_value=AppDbValueConstants.LOADER_VALUE,
                role_keycloak_value=AppDbValueConstants.LOADER_KEYCLOAK_VALUE,
                is_first=False,
                is_last=False,
                prev_id=None,
                next_id=None,
                prev_value=AppDbValueConstants.SECURITY_VALIDATION_BEFORE_UNLOADING_AND_WEIGHING,
                next_value=AppDbValueConstants.CONTROL_WEIGHING,
                can_cancel=False,
                is_active=True,
            ),
            OperationModel(
                id=13,
                title="Отменен",
                value=AppDbValueConstants.CANCELLED,
                role_id=None,
                role_value=None,
                role_keycloak_value=None,
                is_first=False,
                is_last=True,
                prev_id=None,
                next_id=None,
                prev_value=None,
                next_value=None,
                can_cancel=False,
                is_active=True,
            ),
        ]

    def get_prod_data(self):
        return self.get_dev_data()

    def get_dev_updated_data(self) -> list:
        return [
            {"id": 1, "value": AppDbValueConstants.VALIDATION_BEFORE_ENTRY, "prev_id": None, "next_id": 2},
            {"id": 2, "value": AppDbValueConstants.ENTRY_CHECKPOINT, "prev_id": 1, "next_id": 3},
            {"id": 3, "value": AppDbValueConstants.INITIAL_WEIGHING, "prev_id": 2, "next_id": 4},
            {"id": 4, "value": AppDbValueConstants.VALIDATION_BEFORE_LOADING, "prev_id": 3, "next_id": 5},
            {"id": 5, "value": AppDbValueConstants.LOADING_GOODS, "prev_id": 4, "next_id": 6},
            {"id": 6, "value": AppDbValueConstants.CONTROL_WEIGHING, "prev_id": 5, "next_id": 7},
            {"id": 7, "value": AppDbValueConstants.EXIT_SECURITY_CHECKPOINT, "prev_id": 6, "next_id": 8},
            {"id": 8, "value": AppDbValueConstants.SUCCESSFULLY_COMPLETED, "prev_id": 7, "next_id": None},
            {"id": 9, "value": AppDbValueConstants.SECURITY_VALIDATION_BEFORE_UNLOADING_AND_CANCELLATION, "prev_id": 6,
             "next_id": 10},
            {"id": 10, "value": AppDbValueConstants.UNLOADING_EXCESS_GOODS_AND_EXIT, "prev_id": 9, "next_id": 13},
            {"id": 11, "value": AppDbValueConstants.SECURITY_VALIDATION_BEFORE_UNLOADING_AND_WEIGHING, "prev_id": 6,
             "next_id": 12},
            {"id": 12, "value": AppDbValueConstants.UNLOADING_EXCESS_GOODS_AND_WEIGHING, "prev_id": 11, "next_id": 6},
            {"id": 13, "value": AppDbValueConstants.CANCELLED, "prev_id": 10, "next_id": None},
        ]

    def get_prod_updated_data(self):
        return self.get_dev_updated_data()
